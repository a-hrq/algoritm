#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main(){
int M, N;
int j, i, qtd;
printf("Digite a quantidade de linhas do mapa: ");
scanf("%d", &M);
printf("Digite a quantidade de colunas do mapa: ");
scanf("%d", &N);

if(!(1 <= M <= 999 && 1 <= N <= 999)){
exit(1);
}
//aloco um vetor de ponteiros do tipo char de tamanho M (para reresentar as linhas da matriz), depois inicializo cada ponteiro do vetor como um vetor do tipo char de tamanho N (para representar as colunas da matriz)
char **mapa = (char**) malloc(M*sizeof(char*));
if(mapa == NULL){
    exit(1);
}
for(j = 0; j < M; j++){
    mapa[j] = (char*) malloc(N*sizeof(char));
    if(mapa[j] == NULL){
        exit(1);
    }
}
printf("\n\n");
fflush(stdin);
for(j = 0; j < M; j++){
scanf("%s[^\n]", mapa[j]);
}
qtd = 0;
for(j = 0; j < M; j++){
 for(i = 0; i < N; i++){
//para calcular a quantidade de costas no mapa, eu dividi a matriz em duas partes com ifs: a primeira verifica os # das bordas, que automaticamente incrementa na quantidade de costas
//a segunda verifica as # que estão dentro da matriz, onde eu invistigo se existe algum . nas quatro variáveis vizinhas

   if(mapa[j][i] == '#'){

    if(!(j != 0 && j != M-1 && i != 0 && i != N-1)){

        qtd++;

   }

   if(j != 0 && j != M-1 && i != 0 && i != N-1){
    if(mapa [j+1][i] == '.' || mapa [j][i+1] == '.' || mapa [j][i-1] == '.' || mapa [j-1][i] == '.'){
        qtd++;
       }
   }

  }

 }
}
printf("\n %d", qtd);
//faço lireção de cada linha da matriz
for(qtd = 0; qtd < M; qtd++){
  free(mapa[qtd]);
}

free(mapa);

return 0;
}
