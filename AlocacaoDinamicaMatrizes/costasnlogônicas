#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main(){
int M, N;
int j, i, qtd;
printf("Digite a quantidade de linhas do mapa: ");
scanf("%d", &M);
printf("Digite a quantidade de colunas do mapa: ");
scanf("%d", &N);

if(!(1 <= M <= 999 && 1 <= N <= 999)){
exit(1);
}
//aloco um vetor de ponteiros do tipo char de tamanho M (para reresentar as linhas da matriz), depois inicializo cada ponteiro do vetor como um vetor do tipo char de tamanho N (para representar as colunas da matriz)
char **mapa = (char**) malloc(M*sizeof(char*));
for(j = 0; j < M; j++){
    mapa[j] = (char*) malloc(N*sizeof(char));
}
printf("\n\n");
fflush(stdin);
for(j = 0; j < M; j++){
scanf("%s[^\n]", mapa[j]);
}
qtd = 0;
for(j = 0; j < M; j++){
 for(i = 0; i < N; i++){
//para calcular a quantidade de costas no mapa, eu dividi a matriz em 9 partes com ifs: 
//os 4 primeiros ifs são para verificar os "cantos" da matriz, respectivamente: canto superior esquerdo, canto inferior esquerdo, canto superior direito e canto inferior direito, neles invstigo apenas duas "casas" vizinhas
//depois, crio mais 4 ifs para verificar as quatro bordas da matrizes (excluindo os dois cantos de cada borda): borda supeior, borda inferior, borda esquerda e borda direita, neles investigo as três "casas" vizinhas
//e, por último, crio um if para verificar as casas dentro da matriz, nele investigo as quatro "casas" vizinhas
   if(mapa[j][i] == '#'){

    if(j == 0 && i == 0){
      if(mapa[j+1][i] == '.' || mapa[j][i+1] == '.' ){
        qtd++;
      }
    }

    if(j == M-1 && i == 0){
      if(mapa[j-1][i] == '.' || mapa[j][i+1] == '.' ){
        qtd++;
      }
    }

    if(j == 0 && i == N-1){
      if(mapa[j+1][i] == '.' || mapa[j][i-1] == '.' ){
        qtd++;
      }
    }

    if(j == M-1 && i == N-1){
      if(mapa[j-1][i] == '.' || mapa[j][i-1] == '.' ){
        qtd++;
      }
    }

    if(j == 0 && i != 0 && i != N-1){
      if(mapa[j+1][i] == '.' || mapa[j][i-1] == '.' || mapa[j][i+1] == '.'){
        qtd++;
      }
    }

    if(j == M-1 && i != 0 && i != N-1){
      if(mapa[j-1][i] == '.' || mapa[j][i-1] == '.' || mapa[j][i+1] == '.'){
        qtd++;
      }
    }

    if(j != 0 && j != M-1 && i == 0){
      if(mapa[j-1][i] == '.' || mapa[j+1][i] == '.' || mapa[j][i+1] == '.'){
        qtd++;
      }
    }

   if(j != 0 && j != M-1 && i == N-1){
      if(mapa[j-1][i] == '.' || mapa[j+1][i] == '.' || mapa[j][i-1] == '.'){
        qtd++;
      }
    }

   if(j != 0 && j != M-1 && i != 0 && i != N-1){
    if(mapa [j+1][i] == '.' || mapa [j][i+1] == '.' || mapa [j][i-1] == '.' || mapa [j-1][i] == '.'){
        qtd++;
       }
   }

  }

 }
}
printf("\n %d", qtd);
//faço lireção de cada linha da matriz
for(qtd = 0; qtd < M; qtd++){
  free(mapa[qtd]);
}

free(mapa);

return 0;
}
